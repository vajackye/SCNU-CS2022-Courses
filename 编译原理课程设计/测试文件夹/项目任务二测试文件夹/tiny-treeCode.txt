program -> stmt-sequence 
1 
stmt-sequence -> stmt-sequence ; statement 
1 0 3 
stmt-sequence -> statement 
1 
statement -> if-stmt 
1 
statement -> repeat-stmt 
1 
statement -> assign-stmt 
1 
statement -> read-stmt 
1 
statement -> write-stmt 
1 
if-stmt -> if exp then stmt-sequence end 
1 2 0 2 0 
if-stmt -> if exp then stmt-sequence end else stmt-sequence end 
1 2 0 2 0 0 2 0 
repeat-stmt -> repeat stmt-sequence until exp 
1 2 0 2 
assign-stmt -> identifier := exp 
2 1 2 
read-stmt -> read identifier 
1 2
write-stmt -> write exp 
1 2 
exp -> simple-exp comparison-op simple-exp 
2 1 2 
exp -> simple-exp 
1 
comparison-op -> < 
1 
comparison-op -> > 
1 
comparison-op -> = 
1 
comparison-op -> <= 
1 
comparison-op -> <> 
1 
comparison-op -> >=  
1 
simple-exp -> simple-exp addop term 
2 1 2 
simple-exp -> term  
1 
addop -> + 
1 
addop -> - 
1 
term -> term mulop factor 
2 1 2 
term -> factor  
1 
mulop -> * 
1 
mulop -> / 
1 
mulop -> %
1 
mulop -> ^ 
1 
factor -> ( exp ) 
0 1 0 
factor -> number 
1 
factor -> identifier 
1