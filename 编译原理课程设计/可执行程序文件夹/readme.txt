使用说明:
1.在release文件中，找到sampleCompiler.exe文件，双击运行打开。

注意事项：
1.因为用户导入正则之后，分析过程需要一定时间，因此，为了提高用户体验，减少卡顿现象，因此，用于要查看后者结果前，必须先执行前者（比如：我们要查看转DFA之前，就必须点击转NFA），否则会弹出相应的提示：“请先转NFA”。

2.注意，因为任务一自行输入正则表达式时，容易出错，会导致结果分析不对（比如命名嵌套单个字母之差导致的错误），建议通过文本批量读入。

3.因为任务二的单词编码，来自于任务一，故若要使用任务二的单词编码解析（分析编码）前，请先运行任务一的：导入正则、开始分析、转NFA、DFA、DFA最小化的过程，以生成对应的编码映射表，供任务二使用。

4.如果用户需要查看语法树，请在任务二导入编码文件之后，也导入语义动作表。之后才进行编码分析（语法过程展示），编码分析之后即可查看语法树。

5.如果用户要测试同一高级语言的多个单词编码文件，每次导入之前，请先重新点击“开始分析”按钮，清空原先单词编码缓存（内部缓存，展示仍然存在），之后导入单词编码后可正常分析，如若不重新点击开始分析，那么展示语法分析过程的表为缓存内容（上一次单词编码的内容）。


其余问题：
1.对于语法树格式，可参考项目报告最后的附录。此外，也在此举例简易说明，详细规则看报告的附录。
对于：E -> E + n | E - n 这种或的规则，我们需要拆解为：
E -> E + n
E -> E - n
接着，我们用0，1，2，3表示不同的语法树含义：
  '0'（IGNORE）：表示该节点在语法树中被忽略，不作为语法树的一部分，仅参与语法分析过程；
  '1'（ROOT）：表示该节点作为本次规约所构建子树的根节点；
  '2'（CHILD）：表示该节点作为根节点的一个子节点；
  '3'（BRO）：表示该节点与上一兄弟节点存在兄弟关系，应串接到上一兄弟节点的 bro 指针上。
因此，一个简单例子的语法树动作如下：
E -> E + n
2 1 2
E -> E - n
2 1 2
E -> n
1

